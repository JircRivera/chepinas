#########################################################
### Gitkraken y GitLab
#######################################################

# Pasos para crear tu proyecto en GitLab con submódulos utilizando Gitkraken y GitLab

Crear proyecto en GitLab_UAPT o gitlab.com
Inicializar proyecto (con un Readme por ejemplo)
Clonar Repo a mi PC
Copiar y Pegar mis archivos a la carpeta del repo recien clonado
Abrir repo con Gitkraken
Hacer Stage, Commit y Push de los nuevos archivos que copiaste a la carpeta del repo
Si tu proyecto ya tiene submodulos y no los reconoce cuando copiaste los archivos a tu pc, entonces
tienes que borra los submodulos y agregarlos nuevamente en Gitkraken.






#########################################################
### Git
#######################################################

# git con Github, la chepina (El recetario jejej)
# git y github son dos cosas diferentes, git (herramienta o aplicación para gestionar un Distributed Version Control System) y Github (servicio en la nube para hostear un servidor git o repositorio git remoto).

# --- Prerequisitos:
# 1. instalar git https://git-scm.com/
# 2. abrir cuenta en github https://github.com/



# ---   Configuración básica de git
# Nombre, email, colores
git config --global user.name "Nombre Apellido"
git config --global user.email "mymail@dominio.com"
git config --global color.ui true
git config --global color.status auto
git config --global color.branch auto
# Config para LINUX, convierte CRLF a LF al hacer checkout
git config --global core.autocrlf input
# Config para WINDOWS, convierte LF a CRLF al hacer checkout and CRLF a LF al hacer commit 
git config --global core.autocrlf true

# Revisar la Configuración
git config --list



# ---   Configuración de las llaves ssh en tu repo remoto (github) [VER NOTAS de ssh-agent EN ssh topics]
# CUIDADO!!! Nunca compartas tu llave privada
https://www.ssh.com/ssh/copy-id
# Make sure the client allows public key authentication. Check that /etc/ssh/config includes 
PubkeyAuthentication yes.
# Checa si ya tienes un par de llaves ssh, generalmente se encuentran en:
~/.ssh
# Generar tu propio par de llaves ssh (formada por una key publica y otra privada)
## Use the default ssh-keygen or elliptic curves based ssh-keygen
ssh-keygen
ssh-keygen -t ecdsa -b 521
# Revisar que se tengan los siguientes permisos:
https://www.howtogeek.com/168119/fixing-warning-unprotected-private-key-file-on-linux/
chmod 600 ~/.ssh/id_rsa
chmod 600 ~/.ssh/id_rsa.pub
chmod 644 ~/.ssh/known_hosts
# Start the ssh-agent in the background.
eval "$(ssh-agent -s)"
# Agrega tu llave privada ssh al agente: ssh-agent.
ssh-add ~/.ssh/id_rsa
# Comparte tu llave PUBLICA (.pub), con tu cuenta en Github
## OPCION 1:  [NO FUNCIONÓ]
ssh-copy-id -i ~/.ssh/id_rsa.pub git@github.com
## OPCION 2:
## Copia el contenido de: ~/.ssh/id_rsa.pub
xclip -sel clip < ~/.ssh/id_rsa.pub
## Entra en: https://github.com/settings/keys y haz clic en "New SSH key" 
# Comprueba tu conexion ssh
ssh -T git@github.com
ssh -T git@gitlab.com
ssh -i ~/.ssh/id_rsa.pub git@github.com



# A partir de este momento puedes: 
# 1. Iniciar un proyecto y subirlo a Github
# 2. Clonar un repo existente en Github

# ---   1. Iniciar un proyecto y subirlo a Github
# Crea la carpeta de tu proyecto 
mkdir miProyecto
cd miProyecto/

# Inicializa tu proyecto (crea una carpeta .git dentro de miProyecto)
git init

# Crea un archivo, por ejemplo README 
touch README
# o con:
cat <<EOF > README
EOF

# Revisa los cambio en tu carpeta, los cambios se etiquetan con "??"
git status -s

# Tracking files. Agrega todos los cambios al "indice" mejor conocido como el "escenario" (staging). Puedes agregar solo los archivos que te interesan con "git add myfile"
# IPORTANTE!!! el punto al final de la instrucción significa TODOS los archivos con cambios.
git add .

# Revisa nuevamente el estatus. ahora los archivos estan etiquetados con "A"
git status -s

# Crea un punto de control (snapshot) agreegando los cambios en "stage" con el comando commit, agregandole un mensaje "-m" lo suficientemente claro sobre los cambios realizados.  
git commit -m 'Este es un snapshot'

# Agregar a git un repo remoto (origin) vacio (bare remote), github en este caso
git remote add origin gituser@git.server.com:project.git
git remote add origin https://github.com/cubeton/mynewrepository.git

# Guarda los cambios en el repositorio remoto "origin" en la rama "master"
git push origin master

# Revisa el log para consultar cualquier cambio en git 
git log


# ---   2. Clonar un repo existente en Github
# Clonar un repo usando el protocolo ssh
git clone gituser@git.server.com:project.git
# Clonar un repo usando el protocolo https://
git clone https://github.com/libgit2/libgit2
# Clonar un repo usando el protocolo git
git://github.com/libgit2/libgit2


# ---  3. Hacer cambios 
# Descargar los nuevos cambios en el origen de la rama master
git pull origin master

# Crear una nueva rama
git checkout -b <my branch name>
git push origin my-new-branch

# Ver todas las ramas
git branch

# Crear un pull request

# Merge a pull request


# REFERENCIAS:
https://www.tutorialspoint.com/git/index.htm
https://product.hubspot.com/blog/git-and-github-tutorial-for-beginners
https://git-scm.com/book/en/v2/Git-Basics-Getting-a-Git-Repository
https://stackoverflow.com/questions/5561295/what-does-git-push-u-mean
https://mislav.net/2010/07/git-tips/










#########################################################
### Ejemplos
#######################################################

# Crear un repo local, agregar un remoto (en github), y hacer push 
git init
git add .
git commit -m "JIRC First Commit"
# Crear el repo "chepinas" (VACIO) en github 
# Sets the new remote
git remote add origin https://github.com/JircRivera/chepinas.git
# Verifies the new remote URL
git remote -v
git push -u origin master

# Stage, Commit and Push:
git add .
git commit -m "JIRC Update git_github"
git push

# Crear una nueva rama y hacer push 
git branch
git add .
git commit -m "JIRC-branch Update git_github"
git checkout -b JIRC_01
git push -u origin JIRC_01

# Crear repo local, agregar un origin y hacer push
git init
git add .
git commit -m "JIRC First Commit"
# Crear el repo "freelanceWebPage01" (VACIO) en github
# Sets the new remote
git remote add origin https://github.com/JircRivera/freelanceWebPage01.git
# Verifies the new remote URL
git remote -v
git push -u origin master

# Stage, Commit and Push:
git add .
git commit -m "Add README.txt"
git push

------------------------------------------

# Crear repo local "HelloWorld", crear repo en GitLab, agregar el origin (remote), stage, commit, push
-> Crear folder del proyecto y guardar archivos/carpetas
mkdir HelloWorld
cd HelloWorld
-> Inicializar el repo
git init
-> Crear el repo "freelanceWebPage01" (VACIO) en GitLab
https://gitlab.com/JorgeRIC/testhelloworld
-> Sets the new remote (copy the URL from "Clone" button , "Clone with https")
git remote add origin https://gitlab.com/JorgeRIC/testhelloworld.git
-> Verifies the new remote URL
git remote -v
-> Stage
git add .
-> Commit
git commit -m "JIRC First Commit"
-> Push
git push -u origin master

------------------------------------------
# Crear nueva llave en mi equipo
## Se usa el generador de llaves, el prompt pedirá el nombre del archivo y la contrasenia para la llave
ssh-keygen -t ecdsa -b 521
## Se activa el agente de llaves 
eval "$(ssh-agent -s)"
## Se agrega la llave privada al agente
ssh-add ~/.ssh/id_ecdsa_jirc_xdesign-Satellite-C655_Ubuntu18042LTS
## Se copia al portapapeles y se pega en la pagina de gitlab (donde se agregan las llaves)
xclip -sel clip < ~/.ssh/id_ecdsa_jirc_xdesign-Satellite-C655_Ubuntu18042LTS.pub
## Se prueba la conexion
ssh -i ~/.ssh/id_ecdsa_jirc_xdesign-Satellite-C655_Ubuntu18042LTS.pub git@gitlab.com


# Push an existing Git repository
cd existing_repo
git remote rename origin old-origin
git remote add origin git@gitlab.com:JorgeRIC/testtempo.git
git push -u origin --all
git push -u origin --tags






#########################################################
### git topics
#######################################################

# Difference between origin and upstream
https://stackoverflow.com/questions/9257533/what-is-the-difference-between-origin-and-upstream-on-github
https://i.stack.imgur.com/cEJjT.png

# Fork a Repo
https://help.github.com/en/articles/fork-a-repo

# Caching your GitHub password in Git
https://help.github.com/en/articles/caching-your-github-password-in-git

# Connecting to GitHub with SSH
https://help.github.com/en/articles/connecting-to-github-with-ssh

# List your existing remotes
https://help.github.com/en/articles/changing-a-remotes-url
git remote -v

# Change remote URL from https to ssh 
git remote set-url origin git@github.com:JircRivera/chepinas.git

# Change remote URL from ssh to https 
git remote set-url origin https://github.com/JircRivera/chepinas.git

# Git and Google Drive
Creating a server in your own computer inside the google drive folder.
https://www.iexplain.org/using-git-with-google-drive-a-tutorial/





#########################################################
### ssh topics
#######################################################

# Adding your SSH key to the ssh-agent
This is optionally used when the ssh is created with a passphrase and avoids to
enter the passphrase manually each time the ssh key is used.
eval "$(ssh-agent -s)"
ssh-add ~/.ssh/id_rsa

# Comparte tu llave PUBLICA (.pub), con tu cuenta en servidor de git [NO FUNCIONO]
https://www.ssh.com/ssh/copy-id
ssh-copy-id -i ~/.ssh/id_rsa.pub git@github.com




